name: Test and Publish

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: "0 0 * * 0"
  push:
    tags:
      - "v*"

jobs:
  fetch-s2-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get_versions.outputs.versions }}
    steps:
      - name: Get supported versions of Singlestore
        id: get_versions
        uses: singlestore-labs/singlestore-supported-versions@main

  test:
    needs: fetch-s2-versions
    runs-on: ubuntu-latest

    strategy:
      matrix:
        singlestore_version: ${{ fromJson(needs.fetch-s2-versions.outputs.versions) }}
        spark_version: ['3.1.3', '3.2.4', '3.3.4', '3.4.2', '3.5.0', '4.0.0']
        include:
          - spark_version: '3.1.3'
            tag: 'ExcludeFromSpark31'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.2.4'
            tag: 'ExcludeFromSpark32'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.3.4'
            tag: 'ExcludeFromSpark33'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.4.2'
            tag: 'ExcludeFromSpark34'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.5.0'
            tag: 'ExcludeFromSpark35'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '4.0.0'
            tag: 'ExcludeFromSpark40'
            scala_version: '2.13.8'
            java_version: '17'

    steps:
      - name: Remove unnecessary pre-installed toolchains for free disk spaces
        run: |
          echo "=== BEFORE ==="
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/Ruby
          sudo rm -rf /opt/hostedtoolcache/Go
          docker system prune -af || true
          sudo apt-get clean
          echo "=== AFTER ==="
          df -h
      - uses: actions/checkout@v4
      - name: Set up test cluster
        env:
          SINGLESTORE_LICENSE: ${{ secrets.SINGLESTORE_LICENSE }}
          ROOT_PASSWORD: ${{ secrets.SINGLESTORE_PASSWORD }}
          SINGLESTORE_VERSION: ${{ matrix.singlestore_version }}
        run: ./scripts/setup-cluster.sh
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: sbt
      - name: Set up sbt launcher
        uses: sbt/setup-sbt@v1
      - name: Run tests for Spark ${{ matrix.spark_version }}
        env:
          SINGLESTORE_JWT_PASSWORD: ${{ secrets.SINGLESTORE_JWT_PASSWORD }}
          SINGLESTORE_PASSWORD: ${{ secrets.SINGLESTORE_PASSWORD }}
        run: sbt ++${{ matrix.scala_version }} "testOnly -- -l ${{ matrix.tag }}" -Dspark.version=${{ matrix.spark_version }}

  publish:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        spark_version: ['3.1.3', '3.2.4', '3.3.4', '3.4.2', '3.5.0', '4.0.0']
        include:
          - spark_version: '3.1.3'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.2.4'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.3.4'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.4.2'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '3.5.0'
            scala_version: '2.12.12'
            java_version: '11'
          - spark_version: '4.0.0'
            scala_version: '2.13.8'
            java_version: '17'

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: sbt
      - name: Set up sbt launcher
        uses: sbt/setup-sbt@v1
      - name: Set up GPG
        env:
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}
        run: |
          openssl enc -d -aes-256-cbc -K $ENCRYPTION_KEY -iv $ENCRYPTION_IV -in ci/secring.asc.enc -out ci/secring.asc
          gpg --import ci/secring.asc
      - name: Publish Spark ${{ matrix.spark_version }}
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        run: |
          sbt ++${{ matrix.scala_version }} -Dspark.version=${{ matrix.spark_version }} clean publishSigned sonatypeBundleRelease
